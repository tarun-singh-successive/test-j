
@model TestApplication.Entities.Scheme
@using TestApplication.Helpers
@using TestApplication.Models

@Html.HiddenFor(x=>x.CreationDate)
@Html.HiddenFor(x=>x.SchemeTypeId)
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.SchemeCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.SchemeCode, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.SchemeCode, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (ViewBag.SchemeType == (int)Enumerations.AccountType.SavingAccount)
        {
            <div class="form-group">
                @Html.Label("Min Monthly Avg Balance", htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.MinimumMonthlyAverageBalance) })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.MinimumMonthlyAverageBalance, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.MinimumMonthlyAverageBalance, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            @Html.Label(ViewData["MinimumAmountText"].ToString(), htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.MinimumAmount) })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.MinimumAmount, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.MinimumAmount, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (ViewBag.SchemeType == (int)Enumerations.AccountType.Fd)
        {
            <div class="form-group">
                @Html.Label("Interest Lock In Period ", htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.InterestLockinPeriod) })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.InterestLockinPeriod, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.InterestLockinPeriod, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("FD/MIS Lock In Period", htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.PrincipleLockInPeriod) })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.PrincipleLockInPeriod, new { @class = "form-control", required = "required" })
                    @Html.ValidationMessageFor(model => model.PrincipleLockInPeriod, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Tenure of FD/ MIS", htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.TenureInterval) })
                <div class="col-md-8">
                    <div class="col-md-2 p-l0 p-r0">@Html.DropDownListFor(model => model.TenureType, FdModels.GetTenureTypes(), new { @class = "form-control " })</div>
                    <div class="col-md-10 p-l0 p-r0">@Html.EditorFor(model => model.TenureInterval, new { htmlAttributes = new { @class = "form-control", required = "required", min = 0 } })</div>
                    @Html.ValidationMessageFor(model => model.TenureInterval, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            @Html.Label("Annual Interest Rate (%)", htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.AnnualInterestRate) })
            <div class="col-md-8">
                @Html.TextBoxFor(model => model.AnnualInterestRate, new { @class = "form-control", required = "required" })
                @Html.ValidationMessageFor(model => model.AnnualInterestRate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Interest Payout", htmlAttributes: new { @class = "control-label col-md-2", @for = nameof(Model.InterestLockinPeriod) })
            <div class="col-md-8">
                @Html.DropDownListFor(model => model.InterestPayType, FdModels.GetInterestPayoutCycle(), new { @class = "form-control ", required = "required" })
                @Html.ValidationMessageFor(model => model.InterestPayType, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (ViewBag.SchemeType == (int)Enumerations.AccountType.Fd)
        {
            <div class="form-group">
                @Html.LabelFor(model => model.CancellationCharges, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-8">
                    @Html.TextBoxFor(model => model.CancellationCharges, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.CancellationCharges, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-8">
                <input input data-val="true" data-val-required="The Active field is required." id="IsActive" name="IsActive" type="checkbox" value="true" switch="bool" checked="checked">
                <label for="IsActive" data-on-label="Yes" data-off-label="No" class="m-t-4"></label>
                @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
            </div>
        </div>

        
