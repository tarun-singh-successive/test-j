@using TestApplication.Helpers
@{
    ViewBag.Title = "PendingTransactions";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Pending Transactions</h2>


<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-body">
                <table id="datatable-buttons"
                       class="table table-striped table-bordered dt-responsive nowrap"
                       style="border-collapse: collapse; border-spacing: 0; width: 100%;">
                    <thead>
                        <tr>
                            <th>Member Name</th>
                            <th>A/C No</th>
                            <th>Date</th>
                            <th>Amount</th>
                            <th>Payment Mode</th>
                            <th>Company Bank A/C</th>
                            <th>Chq. Clearing Date</th>
                            <th>Status</th>
                            <th>Remarks</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        function updateTransaction(id) {

            var obj = {
                id: id,
                statusId: $("#Status"+ id+" :selected").val(),
                bankAccountId: $("#BankAccount" + id + " :selected").val(),
                chqDate: $("#ChqDate" + id).val(),
                approvedNote: $("#ApprovedNote" + id).val(),
            };
            $.ajax({
                url: "/Approval/UpdateTransactionById",
                data: JSON.stringify(obj),
                type: "POST",
                contentType: "application/json; charset=utf-8",
                datatype: JSON,
                async: true,
                success: function (result) {
                    if (result == 'True') {
                        swal(
                            'Done!',
                            'Transaction completed.',
                            'success',
                            500
                        ).then(function () {

                        window.location.reload();
                            });
                    }
                    else{
                        swal(
                            'Error!',
                            'Transaction not completed.',
                            'error',
                            500
                        ).then(function () {

                            window.location.reload();
                        });
                }
                },
                error: function (data) { }
            });
        }

        $(document).ready(function () {
            var k = @Html.Raw(Json.Encode(this.ViewBag.CompanyAccounts));
            var amountTransactionOptions = [];
            amountTransactionOptions.push({ id: @((int)Enumerations.AmountTransactionStatus.Approved), name: '@(Enumerations.AmountTransactionStatus.Approved.ToString())' });
            amountTransactionOptions.push({ id: @((int)Enumerations.AmountTransactionStatus.Pending), name: '@(Enumerations.AmountTransactionStatus.Pending.ToString())' });
            amountTransactionOptions.push({ id: @((int)Enumerations.AmountTransactionStatus.Rejected), name: '@(Enumerations.AmountTransactionStatus.Rejected.ToString())' });

            var table = $("#datatable-buttons").DataTable({
                    "serverSide": true, // for process server side
                    "filter": true, // this is for disable filter (search box)
                    dom: 'Bfrtip',
                    buttons: [
                        'copy', 'csv', 'excel', 'pdf', 'print'
                    ],
                    "orderMulti": false, // for disable multiple column at once

                    "ajax": {
                        "url": "/Approval/LoadPendingTransactions",
                        "type": "POST",
                        "datatype": "json"
                    },
                    "columnDefs":
                        [{
                            "targets": [9],
                            "visible": true,
                            "searchable": false
                        }],
                    "columns": [
                        { "data": "MemberAccount.Member.Name", "name": "MemberAccount.Member.FirstName", "autoWidth": true },
                        { "data": "MemberAccount.Member.Mobile", "name": "MemberAccount.Member.Mobile", "autoWidth": true },
                        { "data": "TransactionDateString", "name": "TransactionDateString", "autoWidth": true },
                        { "data": "Amount", "name": "Amount", "autoWidth": true },
                        { "data": "PaymentMode", "name": "PaymentMode", "autoWidth": true },
                        {
                            render: function (data, type, row) {
                                if (row.PaymentModeId == @((int)Enumerations.PaymentMode.Cash)) return '';

                                var $select = $('<select class="grid-dropdown form-control" id="BankAccount' + row.Id + '"></select>',
                                    {
                                        id: row.id,
                                        value: row.name
                                    });
                                $.each(@Html.Raw(Json.Encode(this.ViewBag.CompanyAccounts)), function (k, v) {
                                        var $option = $("<option></option>",
                                            {
                                                text: v.Name,
                                                value: v.Id
                                            });
                                        if (row.selected_id == v.Id) {
                                            $option.attr("selected", "selected");
                                        }
                                        $select.append($option);
                                });
                                return $select.prop("outerHTML");
                            }, orderable: false
                        },
                        {
                            render: function (data, type, row) {
                                if (row.PaymentModeId != @((int)Enumerations.PaymentMode.Cheque))
                                    return '';
                                else
                                    return '<input type="date" id=ChqDate' + row.Id + ' class="form-control grid-date">'
                            }, autoWidth: true, orderable:false
                        },
                        {
                            render: function (data, type, row) {
                                var $select = $('<select class="grid-dropdown form-control" id="Status'+row.Id+'"></select>',
                                    {
                                        id: row.id,
                                        value: row.name
                                    });
                                $.each(amountTransactionOptions, function (k, v) {
                                    if (1 == 1) {   //changed this, not sure why the original code has it
                                        var $option = $("<option></option>",
                                            {
                                                text: v.name,
                                                value: v.id
                                            });
                                        if (row.selected_id == v.id) {
                                            $option.attr("selected", "selected");
                                        }
                                        $select.append($option);
                                    }
                                });
                                return $select.prop("outerHTML");
                            }
                        },
                        {
                            render: function (data, type, row) {
                                return '<div class="green-border-focus"><textarea class="form-control" placeholder="Approved Note" id=ApprovedNote' + row.Id + ' rows="3"></textarea></div>'
                            }, autoWidth: true, orderable:false
                        },
                        {
                            "render": function (data, type, full, meta) {
                                return '<button class="btn btn-info waves-effect waves-light" onclick="gridWarning(this, event, updateTransaction)" id=\'' + full.Id + '\'>Update</button>';
                            }, autoWidth: true, orderable: false
                        }
                    ],
                    initComplete: function () {
                        $('#datatable-buttons tbody').on('change', 'select.grid-dropdown', function () {
                            //get selected value
                            var changed = $(this).find(":selected").val();
                            //console.log('changed to', changed);


                            //var cell = table.cell ($(this).closest('td'));
                            //get row being changed
                            var row = table.row($(this).closest('tr'));
                            var data = row.data();

                            //updated the row's sleected value
                            //data.selected_id = changed;

                            ////invalidate the data and redraw
                            //row.invalidate().draw(false);
                        });
                    },
                    buttons: ["copy", "excel", "pdf", "colvis"]
                });
                $("#datatable-buttons_filter").append($(".dt-buttons"));
        });





        @*function getData(cb_func) {
            $.ajax({
                url: "/ajax/objects.txt",
                success: cb_func
            });
        }

        function statusOptions() {
            var namesOptions = [];
            namesOptions.push({ id: @((int)Enumerations.AmountTransactionStatus.Approved), name: @(Enumerations.AmountTransactionStatus.Approved.ToString()) });
            namesOptions.push({ id: @((int)Enumerations.AmountTransactionStatus.Pending), name: @(Enumerations.AmountTransactionStatus.Pending.ToString()) });
            namesOptions.push({ id: @((int)Enumerations.AmountTransactionStatus.Rejected), name: @(Enumerations.AmountTransactionStatus.Rejected.ToString()) });
            return namesOptions;
        }


        $(document).ready(function () {
            var namesOption = [];
            var ownersOption = [];
            getData(function (data) {
                data = JSON.parse(data);

                $.each(data.data, function (k, v) {
                    v.id = k;     //add id property
                    v.selected_id = k;     //add property to track the selected option

                    //change to name + (owner) to folow the table changes
                    v.position = v.name + ' (owner)';

                    //build names and owners objects for columns.render to use
                    namesOption.push({ id: k, name: v.name });
                    ownersOption.push({ id: k, position: v.position });
                });

                var table = $('#example').DataTable({
                    data: data.data,
                    ordering: false,
                    columns: [
                        {
                            data: null,
                            render: function (data, type, row) {
                                var $select = $('<select class="grid-dropdown"></select>',
                                    {
                                        id: row.id,
                                        value: row.name
                                    });
                                $.each(namesOption, function (k, v) {
                                    if (1 == 1) {   //changed this, not sure why the original code has it
                                        var $option = $("<option></option>",
                                            {
                                                text: v.name,
                                                value: v.id
                                            });

                                        //if selected_id = id then this is the selected value
                                        if (row.selected_id == v.id) {  //use == instead of ===
                                            $option.attr("selected", "selected");
                                        }
                                        $select.append($option);
                                    }
                                });
                                return $select.prop("outerHTML");

                            }
                        },
                        {
                            data: null,
                            render: function (data, type, row) {
                                var $select = $("<select></select>",
                                    {
                                        id: row.id,
                                        value: row.position
                                    });
                                $.each(ownersOption, function (k, v) {
                                    if (1 == 1) {
                                        var $option = $("<option></option>",
                                            {
                                                text: v.position,
                                                value: v.id
                                            });
                                        if (row.selected_id == v.id) {
                                            $option.attr("selected", "selected");
                                        }
                                        $select.append($option);
                                    }
                                });
                                return $select.prop("outerHTML");

                            }
                        },
                        { data: "office" },
                        { data: "extn" },
                        { data: "start_date" },
                        { data: "salary" }
                    ],
                    initComplete: function () {
                        $('#example tbody').on('change', 'select.grid-dropdown', function () {
                            //get selected value
                            var changed = $(this).find(":selected").val();
                            //console.log('changed to', changed);


                            //var cell = table.cell ($(this).closest('td'));
                            //get row being changed
                            var row = table.row($(this).closest('tr'));
                            var data = row.data();

                            //updated the row's sleected value
                            data.selected_id = changed;

                            //invalidate the data and redraw
                            row.invalidate().draw(false);
                        });

                    }
                });
            });*@



        //});



    </script>
}
